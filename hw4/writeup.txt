1. 
Below are the results from running the MVmult.cu code on my laptop as well as on the 5 different GPUs on the Courant Servers.
For some reason gpus 1,4, and 5 had errors while the others did not. I don't think this is an issue with memory because gpus 4 and 5 have large memories.
The memory bandwidth is inversely proportional to the second time in the GPU row of the output.
Here we see varying bandwidths depending on the GPU use.
In partular we see very high bandwidths for the GPU's with large errors leading me to believe that this may be the culprit.

andrew@LAPTOP-6R1C4SQV:/mnt/c/Users/andre/Desktop/Scientific Computing/hw/code/GitHub/hw4$ ./MVmult
CPU 0.017448 s
GPU 0.088305 s, 0.012097 s
Error = 0.000000

(base) [adl592@cuda1 hw4]$ ./MVmult
CPU 0.018131 s
GPU 0.060436 s, 0.000032 s
Error = 1585387610.000000

[adl592@cuda2 hw4]$ ./MVmult
CPU 0.024150 s
GPU 0.060906 s, 0.010139 s
Error = 0.000000

(base) [adl592@cuda3 hw4]$ ./MVmult
CPU 0.031319 s
GPU 0.098933 s, 0.005073 s
Error = 0.000000

(base) [adl592@cuda4 hw4]$ ./MVmult
CPU 0.015242 s
GPU 0.092405 s, 0.000016 s
Error = 1585536123.000000

(base) [adl592@cuda5 hw4]$ ./MVmult
CPU 0.012528 s
GPU 0.167638 s, 0.000040 s
Error = 1585507719.000000

3.
Reminder: our project is on Stochastic gradient descent. Specifically comparing it to standard gradient descent for the LASSO problem.

For the project our group completed the following so far:
1. create a git repository
2. created some basic subfunctions that will be used in the descent methods
3. wote up standard gradient descent
4. wrote up standard stocastic gradient descent

One problem we ran into is that we weren't sure how to include the regularization term in the stocastic gradient descent
(should the full term be in each update? should we have n+m functions to optimize over?)

Our next steps are to
1. write up a few modificed stocastic gradient descent functions to compare
2. impliment sparsity in our matrix
3. add the regularization terms
4. compare how the methods perform with varying parameter values and matrix sizes